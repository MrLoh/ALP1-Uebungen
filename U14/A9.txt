```haskell
maxSurfs 0 = 1
maxSurfs n = n + (maxSurfs (n-1))

maxSurfsE n = aux 0 n
              where
              aux acc 0 = acc+1
              aux acc n = aux (acc+n) (n-1)
```


# m + (aux 0 n) == aux m n

##IA: n = 0
m + (aux 0 0)
== m + 0 + 1
== m+1

aux m 0
== m+1


##IV: n = k
m + (aux 0 k) == aux m k


##IS: n = (k+1)
m + (aux 0 (k+1))
== m + (aux (0+k+1) (k+1-1))
== m + (aux (k+1) k)
== m + (k+1) + (aux 0 k)
== (m+k+1)+(aux 0 k)

aux m (k+1)
== aux (m+k+1) (k+1-1)
== aux (m+k+1) k
== (m+k+1)+(aux 0 k)





# maxSurfsE == maxSurfs

##IA: n = 0
maxSurfs 0
== 1

maxSurfsE 0
== aux 0 0
== 0+1
== 1


##IV: n = k
*f√ºr beligbiges aber festes k in N*
maxSurfsE k == maxSurfs k


##IS: n = k+1
maxSurfs (k+1)
== (k+1)+(maxSurfs (k+1-1))
== k+1+(maxSurfs k)
== k+1+(maxSurfsE k)
== k+1+(aux 0 k)

maxSurfsE (k+1)
== aux 0 (k+1)
== aux (0+k+1) (k+1-1)
== aux (k+1) k
== (k+1) + (aux 0 k)
